{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diogo_Ramos\\\\Desktop\\\\book-rest-api-reactjs\\\\src\\\\main\\\\webapp\\\\reactjs\\\\src\\\\components\\\\Book\\\\Book.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveBook, fetchBook, updateBook } from '../../services/index';\nimport { Card, Form, Button, Col, InputGroup, Image } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave, faPlusSquare, faUndo, faList, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport MyToast from '../MyToast';\nimport axios from 'axios';\n\nclass Book extends Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      id: '',\n      title: '',\n      author: '',\n      coverPhotoURL: '',\n      isbnNumber: '',\n      price: '',\n      language: '',\n      genre: ''\n    };\n\n    this.findAllLanguages = () => {\n      axios.get(\"http://localhost:8081/rest/books/languages\").then(response => response.data).then(data => {\n        this.setState({\n          languages: [{\n            value: '',\n            display: 'Select Language'\n          }].concat(data.map(language => {\n            return {\n              value: language,\n              display: language\n            };\n          }))\n        });\n      });\n    };\n\n    this.findAllGenres = () => {\n      axios.get(\"http://localhost:8081/rest/books/genres\").then(response => response.data).then(data => {\n        this.setState({\n          genres: [{\n            value: '',\n            display: 'Select Genre'\n          }].concat(data.map(genre => {\n            return {\n              value: genre,\n              display: genre\n            };\n          }))\n        });\n      });\n    };\n\n    this.findBookById = bookId => {\n      this.props.fetchBook(bookId);\n      setTimeout(() => {\n        let book = this.props.bookObject.book;\n\n        if (book != null) {\n          this.setState({\n            id: book.id,\n            title: book.title,\n            author: book.author,\n            coverPhotoURL: book.coverPhotoURL,\n            isbnNumber: book.isbnNumber,\n            price: book.price,\n            language: book.language,\n            genre: book.genre\n          });\n        }\n      }, 1000);\n      /*axios.get(\"http://localhost:8081/rest/books/\"+bookId)\r\n          .then(response => {\r\n              if(response.data != null) {\r\n                  this.setState({\r\n                      id: response.data.id,\r\n                      title: response.data.title,\r\n                      author: response.data.author,\r\n                      coverPhotoURL: response.data.coverPhotoURL,\r\n                      isbnNumber: response.data.isbnNumber,\r\n                      price: response.data.price,\r\n                      language: response.data.language,\r\n                      genre: response.data.genre\r\n                  });\r\n              }\r\n          }).catch((error) => {\r\n              console.error(\"Error - \"+error);\r\n          });*/\n    };\n\n    this.resetBook = () => {\n      this.setState(() => this.initialState);\n    };\n\n    this.submitBook = event => {\n      event.preventDefault();\n      const book = {\n        title: this.state.title,\n        author: this.state.author,\n        coverPhotoURL: this.state.coverPhotoURL,\n        isbnNumber: this.state.isbnNumber,\n        price: this.state.price,\n        language: this.state.language,\n        genre: this.state.genre\n      };\n      this.props.saveBook(book);\n      setTimeout(() => {\n        if (this.props.savedBookObject.book != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      }, 2000);\n      /*axios.post(\"http://localhost:8081/rest/books\", book)\r\n          .then(response => {\r\n              if(response.data != null) {\r\n                  this.setState({\"show\":true, \"method\":\"post\"});\r\n                  setTimeout(() => this.setState({\"show\":false}), 3000);\r\n              } else {\r\n                  this.setState({\"show\":false});\r\n              }\r\n          });*/\n\n      this.setState(this.initialState);\n    };\n\n    this.updateBook = event => {\n      event.preventDefault();\n      const book = {\n        id: this.state.id,\n        title: this.state.title,\n        author: this.state.author,\n        coverPhotoURL: this.state.coverPhotoURL,\n        isbnNumber: this.state.isbnNumber,\n        price: this.state.price,\n        language: this.state.language,\n        genre: this.state.genre\n      };\n      this.props.updateBook(book);\n      setTimeout(() => {\n        if (this.props.updatedBookObject.book != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      }, 2000);\n      /*axios.put(\"http://localhost:8081/rest/books\", book)\r\n          .then(response => {\r\n              if(response.data != null) {\r\n                  this.setState({\"show\":true, \"method\":\"put\"});\r\n                  setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                  setTimeout(() => this.bookList(), 3000);\r\n              } else {\r\n                  this.setState({\"show\":false});\r\n              }\r\n          });*/\n\n      this.setState(this.initialState);\n    };\n\n    this.bookChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.bookList = () => {\n      return this.props.history.push(\"/list\");\n    };\n\n    this.state = this.initialState;\n    this.state = {\n      genres: [],\n      languages: [],\n      show: false\n    };\n    this.bookChange = this.bookChange.bind(this);\n    this.submitBook = this.submitBook.bind(this);\n  }\n\n  componentDidMount() {\n    const bookId = +this.props.match.params.id;\n\n    if (bookId) {\n      this.findBookById(bookId);\n    }\n\n    this.findAllLanguages();\n    this.findAllGenres();\n  }\n\n  render() {\n    const {\n      title,\n      author,\n      coverPhotoURL,\n      isbnNumber,\n      price,\n      language,\n      genre\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.show ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MyToast, {\n      show: this.state.show,\n      message: this.state.method === \"put\" ? \"Book Updated Successfully.\" : \"Book Saved Successfully.\",\n      type: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: this.state.id ? faEdit : faPlusSquare,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }\n    }), \" \", this.state.id ? \"Update Book\" : \"Add New Book\"), /*#__PURE__*/React.createElement(Form, {\n      onReset: this.resetBook,\n      onSubmit: this.state.id ? this.updateBook : this.submitBook,\n      id: \"bookFormId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 37\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      autoComplete: \"off\",\n      type: \"test\",\n      name: \"title\",\n      value: title,\n      onChange: this.bookChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Enter Book Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridAuthor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 37\n      }\n    }, \"Author\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      autoComplete: \"off\",\n      type: \"test\",\n      name: \"author\",\n      value: author,\n      onChange: this.bookChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Enter Book Author\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridCoverPhotoURL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 37\n      }\n    }, \"Cover Photo URL\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      autoComplete: \"off\",\n      type: \"test\",\n      name: \"coverPhotoURL\",\n      value: coverPhotoURL,\n      onChange: this.bookChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Enter Book Cover Photo URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 41\n      }\n    }, this.state.coverPhotoURL !== '' && /*#__PURE__*/React.createElement(Image, {\n      src: this.state.coverPhotoURL,\n      roundedRight: true,\n      width: \"40\",\n      height: \"38\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 81\n      }\n    })))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridISBNNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 37\n      }\n    }, \"ISBN Number\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      autoComplete: \"off\",\n      type: \"test\",\n      name: \"isbnNumber\",\n      value: isbnNumber,\n      onChange: this.bookChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Enter Book ISBN Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridPrice\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 37\n      }\n    }, \"Price\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      autoComplete: \"off\",\n      type: \"test\",\n      name: \"price\",\n      value: price,\n      onChange: this.bookChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Enter Book Price\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridLanguage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 37\n      }\n    }, \"Language\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      custom: true,\n      onChange: this.bookChange,\n      name: \"language\",\n      value: language,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 37\n      }\n    }, this.state.languages.map(language => /*#__PURE__*/React.createElement(\"option\", {\n      key: language.value,\n      value: language.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 45\n      }\n    }, language.display)))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridGenre\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 37\n      }\n    }, \"Genre\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      custom: true,\n      onChange: this.bookChange,\n      name: \"genre\",\n      value: genre,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 37\n      }\n    }, this.state.genres.map(genre => /*#__PURE__*/React.createElement(\"option\", {\n      key: genre.value,\n      value: genre.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 45\n      }\n    }, genre.display)))))), /*#__PURE__*/React.createElement(Card.Footer, {\n      style: {\n        \"textAlign\": \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 33\n      }\n    }), \" \", this.state.id ? \"Update\" : \"Save\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"info\",\n      type: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }), \" Reset\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"info\",\n      type: \"button\",\n      onClick: this.bookList.bind(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 33\n      }\n    }), \" Book List\")))));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    savedBookObject: state.book,\n    bookObject: state.book,\n    updatedBookObject: state.book\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveBook: book => dispatch(saveBook(book)),\n    fetchBook: bookId => dispatch(fetchBook(bookId)),\n    updateBook: book => dispatch(updateBook(book))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Book);","map":{"version":3,"sources":["C:/Users/Diogo_Ramos/Desktop/book-rest-api-reactjs/src/main/webapp/reactjs/src/components/Book/Book.js"],"names":["React","Component","connect","saveBook","fetchBook","updateBook","Card","Form","Button","Col","InputGroup","Image","FontAwesomeIcon","faSave","faPlusSquare","faUndo","faList","faEdit","MyToast","axios","Book","constructor","props","initialState","id","title","author","coverPhotoURL","isbnNumber","price","language","genre","findAllLanguages","get","then","response","data","setState","languages","value","display","concat","map","findAllGenres","genres","findBookById","bookId","setTimeout","book","bookObject","resetBook","submitBook","event","preventDefault","state","savedBookObject","updatedBookObject","bookChange","target","name","bookList","history","push","show","bind","componentDidMount","match","params","render","method","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {saveBook, fetchBook, updateBook} from '../../services/index';\r\n\r\nimport {Card, Form, Button, Col, InputGroup, Image} from 'react-bootstrap';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faSave, faPlusSquare, faUndo, faList, faEdit} from '@fortawesome/free-solid-svg-icons';\r\nimport MyToast from '../MyToast';\r\nimport axios from 'axios';\r\n\r\nclass Book extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState;\r\n        this.state = {\r\n            genres: [],\r\n            languages : [],\r\n            show : false\r\n        };\r\n        this.bookChange = this.bookChange.bind(this);\r\n        this.submitBook = this.submitBook.bind(this);\r\n    }\r\n\r\n    initialState = {\r\n        id:'', title:'', author:'', coverPhotoURL:'', isbnNumber:'', price:'', language:'', genre:''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const bookId = +this.props.match.params.id;\r\n        if(bookId) {\r\n            this.findBookById(bookId);\r\n        }\r\n        this.findAllLanguages();\r\n        this.findAllGenres();\r\n    }\r\n\r\n    findAllLanguages = () => {\r\n        axios.get(\"http://localhost:8081/rest/books/languages\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({\r\n                    languages: [{value:'', display:'Select Language'}]\r\n                        .concat(data.map(language => {\r\n                            return {value:language, display:language}\r\n                        }))\r\n                });\r\n            });\r\n    };\r\n\r\n    findAllGenres = () => {\r\n        axios.get(\"http://localhost:8081/rest/books/genres\")\r\n            .then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({\r\n                    genres: [{value:'', display:'Select Genre'}]\r\n                        .concat(data.map(genre => {\r\n                            return {value:genre, display:genre}\r\n                        }))\r\n                });\r\n            });\r\n    };\r\n\r\n    /*findBookById = (bookId) => {\r\n        fetch(\"http://localhost:8081/rest/books/\"+bookId)\r\n            .then(response => response.json())\r\n            .then((book) => {\r\n                if(book) {\r\n                    this.setState({\r\n                        id: book.id,\r\n                        title: book.title,\r\n                        author: book.author,\r\n                        coverPhotoURL: book.coverPhotoURL,\r\n                        isbnNumber: book.isbnNumber,\r\n                        price: book.price,\r\n                        language: book.language,\r\n                        genre: book.genre\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error - \"+error);\r\n            });\r\n    };*/\r\n\r\n    findBookById = (bookId) => {\r\n        this.props.fetchBook(bookId);\r\n        setTimeout(() => {\r\n            let book = this.props.bookObject.book;\r\n            if(book != null) {\r\n                this.setState({\r\n                    id: book.id,\r\n                    title: book.title,\r\n                    author: book.author,\r\n                    coverPhotoURL: book.coverPhotoURL,\r\n                    isbnNumber: book.isbnNumber,\r\n                    price: book.price,\r\n                    language: book.language,\r\n                    genre: book.genre\r\n                });\r\n            }\r\n        }, 1000);\r\n        /*axios.get(\"http://localhost:8081/rest/books/\"+bookId)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\r\n                        id: response.data.id,\r\n                        title: response.data.title,\r\n                        author: response.data.author,\r\n                        coverPhotoURL: response.data.coverPhotoURL,\r\n                        isbnNumber: response.data.isbnNumber,\r\n                        price: response.data.price,\r\n                        language: response.data.language,\r\n                        genre: response.data.genre\r\n                    });\r\n                }\r\n            }).catch((error) => {\r\n                console.error(\"Error - \"+error);\r\n            });*/\r\n    };\r\n\r\n    resetBook = () => {\r\n        this.setState(() => this.initialState);\r\n    };\r\n\r\n    /*submitBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            title: this.state.title,\r\n            author: this.state.author,\r\n            coverPhotoURL: this.state.coverPhotoURL,\r\n            isbnNumber: this.state.isbnNumber,\r\n            price: this.state.price,\r\n            language: this.state.language,\r\n            genre: this.state.genre\r\n        };\r\n\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        fetch(\"http://localhost:8081/rest/books\", {\r\n            method: 'POST',\r\n            body: JSON.stringify(book),\r\n            headers\r\n        })\r\n        .then(response => response.json())\r\n        .then((book) => {\r\n            if(book) {\r\n                this.setState({\"show\":true, \"method\":\"post\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        });\r\n        this.setState(this.initialState);\r\n    };*/\r\n\r\n    submitBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            title: this.state.title,\r\n            author: this.state.author,\r\n            coverPhotoURL: this.state.coverPhotoURL,\r\n            isbnNumber: this.state.isbnNumber,\r\n            price: this.state.price,\r\n            language: this.state.language,\r\n            genre: this.state.genre\r\n        };\r\n\r\n        this.props.saveBook(book);\r\n        setTimeout(() => {\r\n            if(this.props.savedBookObject.book != null) {\r\n                this.setState({\"show\":true, \"method\":\"post\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        }, 2000);\r\n        /*axios.post(\"http://localhost:8081/rest/books\", book)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\"show\":true, \"method\":\"post\"});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                } else {\r\n                    this.setState({\"show\":false});\r\n                }\r\n            });*/\r\n\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    /*updateBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            id: this.state.id,\r\n            title: this.state.title,\r\n            author: this.state.author,\r\n            coverPhotoURL: this.state.coverPhotoURL,\r\n            isbnNumber: this.state.isbnNumber,\r\n            price: this.state.price,\r\n            language: this.state.language,\r\n            genre: this.state.genre\r\n        };\r\n\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        fetch(\"http://localhost:8081/rest/books\", {\r\n            method: 'PUT',\r\n            body: JSON.stringify(book),\r\n            headers\r\n        })\r\n        .then(response => response.json())\r\n        .then((book) => {\r\n            if(book) {\r\n                this.setState({\"show\":true, \"method\":\"put\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                setTimeout(() => this.bookList(), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        });\r\n        this.setState(this.initialState);\r\n    };*/\r\n\r\n    updateBook = event => {\r\n        event.preventDefault();\r\n\r\n        const book = {\r\n            id: this.state.id,\r\n            title: this.state.title,\r\n            author: this.state.author,\r\n            coverPhotoURL: this.state.coverPhotoURL,\r\n            isbnNumber: this.state.isbnNumber,\r\n            price: this.state.price,\r\n            language: this.state.language,\r\n            genre: this.state.genre\r\n        };\r\n        this.props.updateBook(book);\r\n        setTimeout(() => {\r\n            if(this.props.updatedBookObject.book != null) {\r\n                this.setState({\"show\":true, \"method\":\"put\"});\r\n                setTimeout(() => this.setState({\"show\":false}), 3000);\r\n            } else {\r\n                this.setState({\"show\":false});\r\n            }\r\n        }, 2000);\r\n        /*axios.put(\"http://localhost:8081/rest/books\", book)\r\n            .then(response => {\r\n                if(response.data != null) {\r\n                    this.setState({\"show\":true, \"method\":\"put\"});\r\n                    setTimeout(() => this.setState({\"show\":false}), 3000);\r\n                    setTimeout(() => this.bookList(), 3000);\r\n                } else {\r\n                    this.setState({\"show\":false});\r\n                }\r\n            });*/\r\n        this.setState(this.initialState);\r\n    };\r\n\r\n    bookChange = event => {\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        });\r\n    };\r\n\r\n    bookList = () => {\r\n        return this.props.history.push(\"/list\");\r\n    };\r\n\r\n    render() {\r\n        const {title, author, coverPhotoURL, isbnNumber, price, language, genre} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div style={{\"display\":this.state.show ? \"block\" : \"none\"}}>\r\n                    <MyToast show = {this.state.show} message = {this.state.method === \"put\" ? \"Book Updated Successfully.\" : \"Book Saved Successfully.\"} type = {\"success\"}/>\r\n                </div>\r\n                <Card className={\"border border-dark bg-dark text-white\"}>\r\n                    <Card.Header>\r\n                        <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Book\" : \"Add New Book\"}\r\n                    </Card.Header>\r\n                    <Form onReset={this.resetBook} onSubmit={this.state.id ? this.updateBook : this.submitBook} id=\"bookFormId\">\r\n                        <Card.Body>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridTitle\">\r\n                                    <Form.Label>Title</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                        type=\"test\" name=\"title\"\r\n                                        value={title} onChange={this.bookChange}\r\n                                        className={\"bg-dark text-white\"}\r\n                                        placeholder=\"Enter Book Title\" />\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridAuthor\">\r\n                                    <Form.Label>Author</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                        type=\"test\" name=\"author\"\r\n                                        value={author} onChange={this.bookChange}\r\n                                        className={\"bg-dark text-white\"}\r\n                                        placeholder=\"Enter Book Author\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridCoverPhotoURL\">\r\n                                    <Form.Label>Cover Photo URL</Form.Label>\r\n                                    <InputGroup>\r\n                                        <Form.Control required autoComplete=\"off\"\r\n                                            type=\"test\" name=\"coverPhotoURL\"\r\n                                            value={coverPhotoURL} onChange={this.bookChange}\r\n                                            className={\"bg-dark text-white\"}\r\n                                            placeholder=\"Enter Book Cover Photo URL\" />\r\n                                        <InputGroup.Append>\r\n                                            {this.state.coverPhotoURL !== '' && <Image src={this.state.coverPhotoURL} roundedRight width=\"40\" height=\"38\"/>}\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridISBNNumber\">\r\n                                    <Form.Label>ISBN Number</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                        type=\"test\" name=\"isbnNumber\"\r\n                                        value={isbnNumber} onChange={this.bookChange}\r\n                                        className={\"bg-dark text-white\"}\r\n                                        placeholder=\"Enter Book ISBN Number\" />\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPrice\">\r\n                                    <Form.Label>Price</Form.Label>\r\n                                    <Form.Control required autoComplete=\"off\"\r\n                                        type=\"test\" name=\"price\"\r\n                                        value={price} onChange={this.bookChange}\r\n                                        className={\"bg-dark text-white\"}\r\n                                        placeholder=\"Enter Book Price\" />\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridLanguage\">\r\n                                    <Form.Label>Language</Form.Label>\r\n                                    <Form.Control required as=\"select\"\r\n                                        custom onChange={this.bookChange}\r\n                                        name=\"language\" value={language}\r\n                                        className={\"bg-dark text-white\"}>\r\n                                        {this.state.languages.map(language =>\r\n                                            <option key={language.value} value={language.value}>\r\n                                                {language.display}\r\n                                            </option>\r\n                                        )}\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridGenre\">\r\n                                    <Form.Label>Genre</Form.Label>\r\n                                    <Form.Control required as=\"select\"\r\n                                        custom onChange={this.bookChange}\r\n                                        name=\"genre\" value={genre}\r\n                                        className={\"bg-dark text-white\"}>\r\n                                        {this.state.genres.map(genre =>\r\n                                            <option key={genre.value} value={genre.value}>\r\n                                                {genre.display}\r\n                                            </option>\r\n                                        )}\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Card.Body>\r\n                        <Card.Footer style={{\"textAlign\":\"right\"}}>\r\n                            <Button size=\"sm\" variant=\"success\" type=\"submit\">\r\n                                <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Save\"}\r\n                            </Button>{' '}\r\n                            <Button size=\"sm\" variant=\"info\" type=\"reset\">\r\n                                <FontAwesomeIcon icon={faUndo} /> Reset\r\n                            </Button>{' '}\r\n                            <Button size=\"sm\" variant=\"info\" type=\"button\" onClick={this.bookList.bind()}>\r\n                                <FontAwesomeIcon icon={faList} /> Book List\r\n                            </Button>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        savedBookObject: state.book,\r\n        bookObject: state.book,\r\n        updatedBookObject: state.book\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveBook: (book) => dispatch(saveBook(book)),\r\n        fetchBook: (bookId) => dispatch(fetchBook(bookId)),\r\n        updateBook: (book) => dispatch(updateBook(book))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Book);"]},"metadata":{},"sourceType":"module"}